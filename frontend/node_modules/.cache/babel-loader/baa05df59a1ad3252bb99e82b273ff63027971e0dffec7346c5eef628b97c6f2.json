{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar s\\\\Desktop\\\\emotion-recommender\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport RecommendationsList from \"./components/RecommendationsList\";\nimport QuoteCard from \"./components/QuoteCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mood, setMood] = useState(\"\");\n  const [recommendations, setRecommendations] = useState([]);\n\n  // Dummy data for testing\n  const dummyMusic = [{\n    title: \"Happy Song 1\",\n    artist: \"Artist A\",\n    url: \"https://spotify.com\",\n    albumImage: \"\"\n  }, {\n    title: \"Happy Song 2\",\n    artist: \"Artist B\",\n    url: \"https://spotify.com\",\n    albumImage: \"\"\n  }];\n  const dummyQuotes = [{\n    quote: \"Happiness is a journey, not a destination.\",\n    author: \"Buddha\"\n  }, {\n    quote: \"Be yourself; everyone else is already taken.\",\n    author: \"Oscar Wilde\"\n  }];\n  const handleMoodSelect = selectedMood => {\n    setMood(selectedMood);\n\n    // Update recommendations based on mood\n    if (selectedMood === \"Happy\") {\n      setRecommendations([...dummyMusic, ...dummyQuotes]);\n    }\n    // Add other moods later\n  };\n\n  // Share callback for quotes\n  const handleShare = quote => {\n    navigator.clipboard.writeText(`\"${quote.quote}\" â€” ${quote.author}`);\n    alert(\"Quote copied to clipboard!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-purple-600 to-pink-500 text-white p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-center mb-6\",\n      children: \"MoodMate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center mb-8\",\n      children: \"Find music & quotes that match your mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center gap-4 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelect(\"Happy\"),\n        className: \"px-4 py-2 bg-white/20 rounded-lg hover:bg-white/40\",\n        children: \"\\uD83D\\uDE03 Happy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Emotion detection coming soon!\"),\n        className: \"px-4 py-2 bg-white/20 rounded-lg hover:bg-white/40\",\n        children: \"Detect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecommendationsList, {\n      recommendations: recommendations,\n      type: mood === \"Happy\" ? \"all\" : \"\",\n      onShare: handleShare\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"18vgpfVpBoNY/xS5BGsXQs9vUrs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","RecommendationsList","QuoteCard","jsxDEV","_jsxDEV","App","_s","mood","setMood","recommendations","setRecommendations","dummyMusic","title","artist","url","albumImage","dummyQuotes","quote","author","handleMoodSelect","selectedMood","handleShare","navigator","clipboard","writeText","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onShare","_c","$RefreshReg$"],"sources":["C:/Users/Sagar s/Desktop/emotion-recommender/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport RecommendationsList from \"./components/RecommendationsList\";\r\nimport QuoteCard from \"./components/QuoteCard\";\r\n\r\nfunction App() {\r\n  const [mood, setMood] = useState(\"\");\r\n  const [recommendations, setRecommendations] = useState([]);\r\n\r\n  // Dummy data for testing\r\n  const dummyMusic = [\r\n    {\r\n      title: \"Happy Song 1\",\r\n      artist: \"Artist A\",\r\n      url: \"https://spotify.com\",\r\n      albumImage: \"\",\r\n    },\r\n    {\r\n      title: \"Happy Song 2\",\r\n      artist: \"Artist B\",\r\n      url: \"https://spotify.com\",\r\n      albumImage: \"\",\r\n    },\r\n  ];\r\n\r\n  const dummyQuotes = [\r\n    { quote: \"Happiness is a journey, not a destination.\", author: \"Buddha\" },\r\n    { quote: \"Be yourself; everyone else is already taken.\", author: \"Oscar Wilde\" },\r\n  ];\r\n\r\n  const handleMoodSelect = (selectedMood) => {\r\n    setMood(selectedMood);\r\n\r\n    // Update recommendations based on mood\r\n    if (selectedMood === \"Happy\") {\r\n      setRecommendations([...dummyMusic, ...dummyQuotes]);\r\n    }\r\n    // Add other moods later\r\n  };\r\n\r\n  // Share callback for quotes\r\n  const handleShare = (quote) => {\r\n    navigator.clipboard.writeText(`\"${quote.quote}\" â€” ${quote.author}`);\r\n    alert(\"Quote copied to clipboard!\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-600 to-pink-500 text-white p-6\">\r\n      <h1 className=\"text-4xl font-bold text-center mb-6\">MoodMate</h1>\r\n      <p className=\"text-center mb-8\">Find music & quotes that match your mood</p>\r\n\r\n      {/* Mood selection */}\r\n      <div className=\"flex justify-center gap-4 mb-8\">\r\n        <button\r\n          onClick={() => handleMoodSelect(\"Happy\")}\r\n          className=\"px-4 py-2 bg-white/20 rounded-lg hover:bg-white/40\"\r\n        >\r\n          ðŸ˜ƒ Happy\r\n        </button>\r\n        <button\r\n          onClick={() => alert(\"Emotion detection coming soon!\")}\r\n          className=\"px-4 py-2 bg-white/20 rounded-lg hover:bg-white/40\"\r\n        >\r\n          Detect\r\n        </button>\r\n      </div>\r\n\r\n      {/* Recommendations */}\r\n      <RecommendationsList\r\n        recommendations={recommendations}\r\n        type={mood === \"Happy\" ? \"all\" : \"\"}\r\n        onShare={handleShare}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}